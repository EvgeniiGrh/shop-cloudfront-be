service: product-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  httpApi:
    cors: true
  environment:
    TABLE_PPODUCTS: products  
    TABLE_STOCKS: stocks  
    SQS_URL:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: createProductTopic
  iam:
    # role: arn:aws:iam::735163746441:role/dynamodblamdaaccess
    role:
      name: lamdaaccess
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:Scan'
            - 'dynamodb:Query'
            - 'dynamodb:PutItem'
          Resource:
            - 'arn:aws:dynamodb:us-east-1:735163746441:table/products'
            - 'arn:aws:dynamodb:us-east-1:735163746441:table/stocks'
        - Effect: Allow
          Action:
            - 'sqs:SendMessage'
            - 'sqs:ReceiveMessage'
            - 'sqs:DeleteMessage'
            - 'sqs:GetQueueAttributes'
          Resource:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
        - Effect: Allow
          Action:
            - 'sns:Publish'
          Resource: '*'      


resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "createProductTopic"
    cptSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: "jonnypeas1327@gmail.com"
        TopicArn:
          Ref: createProductTopic

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js' 
    includeModules: true 
    packager: 'npm'
  autoswagger:
    title: 'string'
    apiType: 'httpApi'
    generateSwaggerOnDeploy: true
    typefiles: []
    host: ''
    schemes: ['https']


# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: handlers/getProductsList.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
  getProductsById:
    handler: handlers/getProductsById.getProductsById
    events:
      - httpApi:
          path: /products/{id}
          method: get
  createProduct:
    handler: handlers/createProduct.createProduct
    events:
      - httpApi:
          path: /products
          method: post 
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: 
              - catalogItemsQueue
              - Arn
               


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
